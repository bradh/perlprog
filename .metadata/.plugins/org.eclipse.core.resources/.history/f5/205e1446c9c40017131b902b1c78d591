    #!/usr/bin/perl -w
    # S. Mouchot le 8/11/17
    # proxy_MIDS_5.pl permet une reconnexion automatique à une resource MIDS sans perte de la connexion hôte
    # (pas de détection de la coupure avec la ressource MIDS)
    use strict;
    use lib qw(/media/stephane/TRANSCEND/Tools/perlprog/lib);
    use lib qw(/home/stephane/Informatique/perlprog_repo/perlprog/proxy_MIDS/proxy_MIDS/lib);
    use POSIX ":sys_wait_h"; # for nonblocking read
    use IO::Socket;
 use bxm_processing;
 use fom04_processing;
 use Conversion;
 
 my $fom;
 my $bom;
 my $bom_length = 0;
 my $bom_id;
 my $bom_byte_received_nber=0;
 	my $fxm_id_h = 14;
	my $fxm_id_l = 9;
	my $fxm_length_h = 8;
	my $fxm_length_l = 0;

 my $fim;
 my $bim;
 my $bim_length = 0;
 my $bim_id;
 my $bim_byte_received_nber=0;
    
    
    my %children;
    
    my  $socket_dlip;
my $cnx_dlip;
my $cnx_mids;
my $child_dead = 0;
my $kidpid;
my ($host, $port, $kidpid, $cnx_mids, $line, $byte);

$SIG{CHLD} = sub {
	# don't change $! and $? outside handler
	local ($!, $?);
	print " $! and $?\n";
	while ( (my $pid = waitpid(-1, WNOHANG)) > 0 ) {
		delete $children{$pid};
		print "toto is dead !\n";
		$child_dead = 1;
		open_dlip_cnx();
		#cleanup_child($pid, $?);
	}
};

unless (@ARGV == 3) { die "usage: $0 host1 port1 port2" }
my ($host1, $port1, $port2) = @ARGV;

print "Hello world !\n";
sleep 1;

# Creation du serveur                           
#server Input

sub open_dlip_cnx{
	eval {
		$socket_dlip = IO::Socket::INET->new( Proto     => "tcp",
	                                  LocalPort => $port2,
	                                  Listen    => SOMAXCONN,
	                                  Reuse     => 1);
		                                 
		die "can't setup server 2" unless $socket_dlip;
		print "[Waiting DLIP connection]\n";
		$cnx_dlip = $socket_dlip->accept();
	
		print "[Accept client dlip]\n";
		$cnx_dlip->autoflush(1);
		print "[DLIP connected on port $port2]\n";
	}	   
}

open_dlip_cnx();
print "cnx dlip OK\n" if(! $cnx_dlip);

while(1){
	$child_dead = 0;
	print "[Try to connect to MIDS on host $host1 and port $port1]\n";
	
	sleep 1;
	eval {
		$cnx_mids = IO::Socket::INET->new(Proto     => "tcp",
                                    PeerAddr  => $host1,
                                    PeerPort  => $port1)
		or die "can't connect to port $port1 on $host1: $!";
 	};
	next if($@ =~ /can't connect/);

	$cnx_mids->autoflush(1);       # so output gets there right away
	print "[Connected to MIDS $host1:$port1]\n";

# split the program into two processes, identical twins
	die "can't fork: $!" unless defined($kidpid = fork());

	# the if{} block runs only in the parent process
	if ($kidpid) {
		# copy the socket to standard output
		while (1){
			eval{
				my $byte1;
				if(sysread($cnx_mids, $byte1, 1) == 1) {
					my $bim = processed_bim($byte);
					#print "waiting to complete FIM...\n";
           			if($bim ne '0'){
	           			print "transmitting FIM...\n";
	           			syswrite $cnx_mids, $bim;
						#$cnx_dlip->send($bim);
           			}
				}
				else{
					die "no read";
				}
				#process_rxdata($byte);     			
			};
			last if($@ =~ /no read/ || $child_dead);
		}
		print "parent kill its child...\n";
		$child_dead = 0;
		close $cnx_mids;
		sleep 20;
		kill("TERM", $kidpid);   # send SIGTERM to child
	}
	# the else{} block runs only in the child process
	else {
		my $i = 0;
		# copy standard input to the socket
		while (1){
			eval {
				if( sysread($cnx_dlip, my $byte, 1) == 1 ) {
					print "dlip -> mids $byte\n";
					my $bom = processed_bom($byte);
           			#print "waiting to complete FOM...\n";
           			if($bom ne  '0'){
	           			print "transmitting FOM...\n";      			
	           			syswrite $cnx_dlip, $bom;
	           			#$cnx_mids->send($byte);
           			}
				}
				else {die "no read"}
			};
			last if($@ =~ /no read/);
		}
		close $cnx_dlip;
		close $socket_dlip;
		print "child will kill himself...\n";
        exit(0);                # just in case
    }
}
    
sub processed_bim {
	my $byte = shift;
	my $debug = 0;
	$bim_byte_received_nber += 1;
	$bim = '' if($bim_byte_received_nber == 1 );
	my $hexa_byte = unpack('H2', $byte);
	#print "bim byte received : $bim_byte_received_nber\n" if($debug);
	#print "byte en hexa  = $hexa_byte \n"if($debug);
	#print unpack('B*', $bim) ."\n"if($debug);
	$bim = $bim . $byte;
	#print "concactenation du bim " . unpack('B*', $bim) . "\n" if($debug);
	
	if($bim_byte_received_nber == 2){
		$bim_id = bxm_processing::get_fxm_id($bim);
		$bim_length = bxm_processing::get_fxm_length($bim);
		print "receiving fim $bim_id\n"if($debug);
		print "longueur attendue = $bim_length\n"if($debug);
	}
	# si on a recu le bim entier
	if( $bim_byte_received_nber == ($bim_length + 1)*2){	
		print "concactenation du bim " . unpack('B*', $bim) . "\n"if($debug);	
		$bim_byte_received_nber = 0	;
		return $bim;
	}
	else{
		return '0';
	}
}
sub process_rxdata {
    	my $byte = shift;
    	print "Client receiving : ";
    	syswrite STDOUT,  $byte;
    	print "\n";   	
}

sub processed_bom {
	my $byte = shift;
	$bom_byte_received_nber += 1;
	my $debug = 0;
	$bom = '' if($bom_byte_received_nber == 1 );
	#print "bom byte received : $bom_byte_received_nber\n" if($debug);
	my $hexa_byte = unpack('H2', $byte);
	#print "byte en hexa  = $hexa_byte \n";	
	#print "byte in binary = ". unpack('B*', $byte) ."\n";
	$bom = $bom . $byte;
	
	#print "concactenation du bom " . unpack('B*', $bom) . "\n";

	if($bom_byte_received_nber == 2){
		# calcul le fom_id et sa longueur
		$bom_id = bxm_processing::get_fxm_id($bom);
		$bom_length = bxm_processing::get_fxm_length($bom);
		print "bin bom_length : $bom_length\n" if($debug);
		print "receiving fom $bom_id\n" if($debug);
		print "longueur attendue = $bom_length\n" if($debug);
	}
	# si on a recu le bom entier
	#my $toto = ($fom_length-1);
	#print "longueur attendu : $toto\n";
	if( $bom_byte_received_nber == ($bom_length+1)*2){		
		#$fom = processed_fom($bom, $fom_id);
		$bom_byte_received_nber = 0	;
		print "concactenation du bom " . unpack('B*', $bom) . "\n" if($debug);
		$bom = processed_fom($bom, $bom_id);
		return $bom;
	}
	else{
		return '0';
	}
}
