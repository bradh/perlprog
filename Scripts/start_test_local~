#!/usr/atelier/gnu/perl_5.00404/solaris/bin/perl -w


use Getopt::Std;
use Time::Local;

getopts("hxs:");

my @PROCESS = ("loc1_main",
	       "host_test_driver",
	       "l16_test_driver",
	       );
my $REP_SCRIPT = "/h7_usr/sil2_usr/loc1test/Tools/Scripts";
my $REP_RESULTS = "$REP_VERSION/results";
my $REP_EXE = "/h7_usr/sil2_usr/loc1test/Runtime2";
my $REP_DUREE = "$REP_VERSION";
my $REP_CIBLE = "~/Runtime";
my $CAT = 1;
my $VERSION;
my $NOM_TEST;
my $DURATION_FILE="test_duration_list.txt";

my $TIME = 600;
my $DELTATPS=10; # declage en seconde pour le lancement des executables

if ($opt_h) { 
	print "start_test_local [-c] [-h] : liste des versions dlip \n";
#	print "\t liste des versions dlip: \n";
	print "start_test_local [-c] [-v n_version ][-h] : liste des tests existants \n";
#	print "\t liste les tests existants \n";
	print "start_test_local [-c] [-v n_version ][-t nom_du_test][-s temp_du_test][-x] : lancement d'un test \n";
	print "l'option -x inhibit le lancement des xterm showlog et showerr\n";
	print " \n";
}


if( ! $opt_h ) {
  
# Lecture du fichier duree_des_tests.txt et calcul de la dur‰e du test en seconde
if( $opt_s) {
    $TIME = $opt_s;
  }
else {
	$TIME = 300;
}
  print "La dur‰e du test $NOM_TEST est ‰gale € $TIME\n";

# Positionnement dans le r‰pertoire de test
  chdir "$REP_CIBLE" or die "Impossible positionner le rep $REP_CIBLE\n";
  $TOTO = `pwd`;
  print "Repertoire de test $TOTO positionn‰ \n"



 


# Affichage des versions des exe positionn‰s
#my $TEXT = `show_version`;
#print "$TEXT";
# Conversion des fichier DOS en fichiers UNIX
# system("convall");


# Calcul de l'heure locale pour la synchronisation des exe
 ($second, $minute,$hour,$day, $month,$year)=(localtime)[0,1,2,3,4,5];
$month = $month+1;
$year=$year+1900;

print "$hour:$minute:$second le $day/$month/$year\n";
$second=(($hour*60)+$minute)*60+$second+$DELTATPS;
# create loc1_main.synchro file
open Fout, ">loc1_main.synchro" or die "impossible de creer loc1_main.synchro\n";
print Fout "Synchro_Year=$year\n";
print Fout "Synchro_Month=$month\n";
print Fout "Synchro_Day=$day\n";
print Fout "Synchro_Seconds=$second\n";
close Fout;

# Lancement des executables
  for my $PROCESS (@PROCESS) {
    if ($PROCESS eq "loc1_main") {
# Pour tracer les appels systeme
#      system ("truss -t open,close,ioctl,so_socket -s \!14 loc1_main > traces.sys.err 2>&1 &");
      system ("loc1_main > /dev/null 2>&1  &");
      print "loc1_main lanc‰...\n";
    }
    if($PROCESS eq "host_test_driver") {
      system("host_test_driver C2_test_driver.conf $year $month $day $second > C2_host_test_driver.log &");
      print "C2_host_test_driver lanc‰ ...\n";
      system("host_test_driver L16NCM_test_driver.conf  $year $month $day $second > L16NCM_host_test_driver.log &");
      print "L16NCM_host_test_driver lanc‰ ...\n";
    }
    if($PROCESS eq "l16_test_driver") {
      system("l16_test_driver l16_test_driver.conf $year $month $day $second > /dev/null 2>&1 &");
      print "l16_test_driver lanc‰ ...\n";
    }
  }

system("xterm -e showerr &") if(! $opt_x) ;
system("xterm -e showlog &") if(! $opt_x);

# cr‰ation du fichier stop
my $PID;
 my $PROC_NAME = "toto";
 my @PS = (`ps -f`);
 open Fout, ">$REP_SCRIPT/stop" or die "impossible d'ouvrir >$REP_CIBLE/stop \n";
 print Fout "#!/usr/bin/ksh\n";
    for my $LIGNE (@PS) {
      chomp ($LIGNE);
      
      if ($LIGNE =~ /loc1_main/) {
	#print "$LIGNE \n";
	$PID = (split " ",$LIGNE) [1];
	$PROC_NAME = (split " ", $LIGNE)[7];
	print Fout "kill -15 $PID\n";
	print "$PROC_NAME PID =  $PID\n";
      }
      if ($LIGNE =~ /host_test_driver|l16_test_driver|l11_test_driver/) {
	print "\n";
	#print "$LIGNE \n";
	$PID = (split " ",$LIGNE) [1];
	$PROC_NAME = (split " ", $LIGNE)[7];
	print Fout "kill -9 $PID\n";
	print "$PROC_NAME PID =  $PID\n";
      }
    }
 print Fout "rm $REP_SCRIPT/stop\n";
 print Fout "exit 0\n";
 close Fout;
 system("chmod +x $REP_SCRIPT/stop");

# Calcul de la dur‰e du scenario
while ( $TIME != 0) {
  sleep 1;
  $TIME=$TIME-1;
}

# Arret des executables
system("stop");
print "Test termin‰\n";

# Analyse du fichier log
#system("error_extract.pl -c $CAT -v $VERSION -t $NOM_TEST");

# nettoyage du r‰pertoire
#system("cleanout");
#system("rm  *.xdh *.jo *.fim $REP_SCRIPT/stop");
system("rm $REP_SCRIPT/stop");

#chdir ".." or die "Impossible positionner le rep pˆre\n";
# compilation des r‰sultats avec 
#system("tar cvf $NOM_TEST.tar $NOM_TEST/*");
#system("tar cvf $NOM_TEST.tar *.xhd *.xdh *.jo *.ji *.log* *.f?m");
#system("gzip -f $NOM_TEST.tar");
# Move du tar.gz dans $REP_RESULTS
#system("mv $NOM_TEST.tar.gz $REP_RESULTS");

}
exit 0;



